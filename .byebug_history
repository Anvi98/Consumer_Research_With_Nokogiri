exit
review = parsed.css('div.review-content').count
review = parsed.css('div.review-content')
parsed = Nokogiri::HTML(raw)
parsed = Nokogiri::HTML(url)
parsed = Nokogiri::HTMLL(url)
raw = HTTParty.get(url)
url = 'https://www.trustpilot.com/review/www.revolut.com?aspects=experience'
url = 'https://www.trustpilot.com/review/www.revolut.com'
parsed_html.css('div.review-content')
@count_reviews.count
exit
@review_list = @parsed_html.css('div.review-content')
table = parsed_html.css('div.review-content').count
parsed_html.css('span.headline__review-count').text.gsub(',', '')
parsed_html.css('span.headline__review-count').text.to_i
parsed_html.css('span.headline__review-count').text
parsed_html.css('span.headline__review-count').to_i
table = parsed_html.css('div.review-content').text
table = parsed_html.css('div.review-content').count
table = parsed_html.css('div.review-content')
parsed_html = Nokogiri::HTML(raw_ht.body)
raw_ht = HTTParty.get(raw)
parsed_html = Nokogiri::HTML(raw.body)
raw = 'https://www.trustpilot.com/review/www.revolut.com?aspects=experience'
exit
table = parsed_html.css('div.review-content')
exit
table = parsed_html.css('div.review-content')
exit
res.count
res = table.select{|img| img.attr('alt').split(':')[0].split(' ')[0].to_i <= 4}
res.count
res = table.select{|img| img.attr('alt').split(':')[0].split(' ')[0].to_i <= 3}
res.count
res = table.select{|img| img.attr('alt').split(':')[0].split(' ')[0].to_i <= 5}
res.count
res[0]
res[0].text
res.text
res = table.select{|img| img.attr('alt').split(':')[0].split(' ')[0].to_i == 5}
res = table.select{|img| img.attr('alt').spliit(':')[0].split(' ')[0].to_i == 5}
table[3].attr('alt').
res = table.select{|img| img.attr('alt').text.spliit(':')[0].split(' ')[0].to_i == 5}
table[3].attr('alt')
table[3]
table = parsed_html.css('div.review-content img')
parsed_html.css('div.review-content img')[4]
parsed_html.css('div.review-content img')[3]
parsed_html.css('div.review-content img')
parsed_html.css('div.review-content img').attr('alt')
parsed_html.css('img').attr('alt')
parsed_html.css('img').attr('allt')
parsed_html.css('img')
parsed_html.css('div.review-content img').attr('alt')
parsed_html.css('div.review-content img').attr
parsed_html.css('div.review-content img')
parsed_html.css('div.review-content img').attr('alt')
div img
parsed_html.css('div.review-content').attr('src')
parsed_html.css('div.review-content').attr
k.attr('alt')
k = parsed_html.css('div.review-content')
parsed_html.css('div.review-content')
k = parsed_html.css('img[alt]')
k = parsed_html.css('img=[alt]')
k = parsed_html.css('img=[alt]5 stars: Excellent')
k = parsed_html.css('img[alt]==5 stars: Excellent')
k = parsed_html.css('img[alt]=5 stars: Excellent')
k
kk
k = parsed_html.css('img[src]')
parsed_html.css('img[alt]')[0]
parsed_html.css('img[alt]')
parsed_html.css('img[alt= 5]')
parsed_html.css('img[alt= 5*]')
parsed_html.css('img[alt= 5 stars: Excellent]')
parsed_html.css('img[alt=5 stars: Excellent]')
parsed_html('img[alt=5 stars: Excellent]')
parsed_html('img').attr('alt')
k
k = parsed_html.css('img').attr('alt')
parsed_html.css('img').attr('alt').all
parsed_html.css('img').attr('src')
parsed_html.css('img').attr('alt')
parsed_html.css('img').attr('5')
parsed_html.css('img').attr('value')
parsed_html.css('img')
parsed_html.css('img').attr('alt')
parsed_html.css('div.reviews-card')
parsed_html.css('div.reviews-card').attr('alt')
parsed_html.css('div.review-list').attr('alt')
parsed_html.css('div.review-content').attr('alt')
parsed_html.css('div.review-content')
exit
parsed_html.css('img')[0]
parsed_html.css('img')
county = all_co.css('img')
all_co = parsed_html.css('div.review-content').text
last_review_wrapper.css('img').attr('alt').text.split(':')[0].split(' ')[0].to_i
exit
last_review_wrapper = parsed_html.css('div.review-list')[0].text
last_review_wrapper = parsed_html.css('div.review-card')[0].text
last_review_wrapper = parsed_html.css('div.review-content')[0].text
last_review_wrapper = parsed_html.css('div.review-content')[0]
parsed_html = Nokogiri::HTML(raw_html.body)
last_review_wrapper.css('a').text.split(' ').slice(0, 3).push('..').join(' ')
exit
parsed_html.css('a.link.link--large.link--dark').last.text.split(' ')
parsed_html.css('a.link.link--large.link--dark').first.text.split(' ')
parsed_html.css('a.link.link--large.link--dark').first.text.split(' ')[:1]
parsed_html.css('a.link.link--large.link--dark').first.text.split(' ')[0:1]
parsed_html.css('a.link.link--large.link--dark').first.text.split(' ')[0, 1]
parsed_html.css('a.link.link--large.link--dark').first.text.split(' ')[0 1]
parsed_html.css('a.link.link--large.link--dark').first.text.split(' ')[0,1]
parsed_html.css('a.link.link--large.link--dark').first.text.split(' ')[1]
parsed_html.css('a.link.link--large.link--dark').first.text.split(' ')
parsed_html.css('a.link.link--large.link--dark').first.text.split('\n')
parsed_html.css('a.link.link--large.link--dark').first.text.split(' ')
parsed_html.css('a.link.link--large.link--dark').first.text
parsed_html.css('span.headline__review-count')[0]
parsed_html.css('span.headline__review-count')[2]
parsed_html.css('span.headline__review-count')
parsed_html.css('span.headline__review-count').text
parsed_html.css('a.link.link--large.link--dark').last.text
parsed_html.css('a.link.link--large.link--dark').first.text
parsed_html.css('h2.review-content__title').first.text
parsed_html.css('h2.review-content__title').text.first
parsed_html.css('h2.review-content__title').first
parsed_html.css('h2.review-content__title').count
parsed_html.css('h2.review-content__title').text
exit
end
parsed_html
raw_html
url
